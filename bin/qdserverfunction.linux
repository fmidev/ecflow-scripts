#!/bin/sh

%include <head.h>

echo "|=============================|"

pathname=%PathName%

if [ -z "$pathname" ]; then
	echo "PathName not set"
	exit 1
fi

postproc=$(echo %PostProc% | tr '[:upper:]' '[:lower:]')

if [ -z "$postproc" ]; then
        echo "postproc not set"
        exit 1
fi

filenamemask=%FileNameMask%

if [ -z "$filenamemask" ]; then
	filenamemask="none"
fi

cluster="%cluster:huruakka%"

use_pgcldb=%UsePG:USE_CLDB=1%
use_oc=%USE_OC:1%

echo "$(date +'%%Y-%%m-%%d %%H:%%M:%%S') USE_OC=$use_oc $pathname $postproc" >> /tmp/qdserverfunction-use_oc.log

start_oc() {

  if [ "$use_pgcldb" = "USE_CLDB=1" ]; then
    use_pgcldb=0
  elif [ "$use_pgcldb" = "USE_PGCLDB=1" ]; then
    use_pgcldb=1
  fi

  # change forward slashes to dashes
  ocpathname=${pathname//\//-}
  # remove underscore (not a valid character)
  ocpathname="${ocpathname//_}"

  # add task name because a family might have multiple get-tasks
  ocpathname="${ocpathname}-%TASK%"

  # a valid label must be an empty string or consist of alphanumeric characters, '-', '_' or '.',
  # and must start and end with an alphanumeric character (e.g. 'MyValue',  or 'my_value',  or '12345')
  # openshift only allows 63 characters

  job=$(echo $ocpathname | sed 's/_/-/g' | tr '[:upper:]' '[:lower:]' | tr -d '.' | head -c 63 | sed 's/[-_]$//')

  oc delete --ignore-not-found=true job/$job
  oc process -p RUN_IDENTIFIER=$job \
	-p POSTPROC=$postproc \
	-p FILENAMEMASK=$filenamemask \
 	-p PATHNAME=$pathname \
	-p VERSION=%VERSION:prod% \
        -p USE_PGCLDB=$use_pgcldb \
	qdservertask-template | oc create -f -
  
  if [ $? -ne 0 ]; then
    echo "creating job failed"
    exit 1
  fi

  oc_wait_timeout=%OC_WAIT_TIMEOUT:3600%
  set +e
  oc-wait.sh $job --timeout=${oc_wait_timeout}s
  ret=$?
  set -e  

  oc logs job/$job

  if [ $ret -eq 0 ]; then
    echo "job $job has finished successfully"
  else
    echo "job $job has failed"
    podname=$(oc get pods -l job-name=$job -o jsonpath='{.items[*].metadata.name}')
    status=$(oc get pod $podname -o jsonpath='{.status.containerStatuses[0].state.waiting.reason}')
    exit 1
  fi

}

infradb_env_file=%INFRADB_ENV_FILE:"$HOME/.infradb-env"%

if [ -f $infradb_env_file ]; then
  . $infradb_env_file
fi

huruakka_storetime.sh $pathname %TASK% start %ECF_DATE% %FAMILY1%

if [ $use_oc -eq 0 ]; then

  # start runs in 'old' huruakka cluster, the one with physical machines

  sh remoterun.cluster.exec fmi_prod $cluster $use_pgcldb ORACLE_CURSOR_SHARING=Y qdserver.sh -q $postproc -m "$filenamemask" $pathname

else

  # start runs in openshift

  export KUBECONFIG=$(kubeprompt -t)

  # Read openshift credentials

  oc_env_file=%OC_ENV_FILE:"$HOME/.openshift-token"%

  if [ -f $oc_env_file ]; then
    . $oc_env_file
  fi

  set +u

  if [ -z "$OPENSHIFT_TOKEN" ]; then
    echo "openshift token missing (env variable OPENSHIFT_TOKEN)"
    exit 1
  fi

  if [ -z "$OPENSHIFT_HOST" ]; then
    echo "openshift hostname missing (env variable OPENSHIFT_HOST)"
    exit 1
  fi

  set -u
  oc login -n huruakka --token $OPENSHIFT_TOKEN $OPENSHIFT_HOST

  set -x

  start_oc

  rm -f "$KUBECONFIG"

fi

huruakka_storetime.sh $pathname %TASK% stop %ECF_DATE% %FAMILY1%

echo "|=============================|"

%include <tail.h>
